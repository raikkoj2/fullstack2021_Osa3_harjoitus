{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"uKAeeA,EAbF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UACb,qBAAuB,iBAE7B,OACI,6BACI,8BACKH,EAAKI,QADV,IACmB,wBAAQC,QAASJ,EAAjB,SAAoCC,UCR7DI,EAAU,aAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC2E5BK,EArFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,KAKhBC,qBAAU,WACRC,IAEGhB,MAAK,SAAAiB,GACJP,EAASO,QAEZ,IAEHC,QAAQC,IAAI,SAAUV,EAAMW,OAAQ,SAEpC,IAsCMC,EAAcR,EAChBJ,EACAA,EAAMa,QAAO,SAAA/B,GAAI,OAAIA,EAAKG,aAE9B,OACE,gCACE,uCACA,8BACE,yBAAQE,QAAS,kBAAMkB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGQ,EAAYE,KAAI,SAAAhC,GAAI,OACnB,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAlCD,SAAAa,GACzB,IAAMd,EAAOkB,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAEpB,KAAOA,KAChCqB,EAAW,2BAAQnC,GAAR,IAAcG,WAAYH,EAAKG,YAEhDsB,EACUX,EAAIqB,GACX1B,MAAK,SAAA2B,GACJjB,EAASD,EAAMc,KAAI,SAAAhC,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAOoC,SAEpDC,OAAM,SAAAC,GACLC,MAAM,aAAD,OACUvC,EAAKI,QADf,sCAGLe,EAASD,EAAMa,QAAO,SAAAG,GAAC,OAAIA,EAAEpB,KAAOA,SAqBR0B,CAAmBxC,EAAKc,MAF3Cd,EAAKc,SAMhB,uBAAM2B,SA3DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBxC,QAASgB,EACTyB,MAAM,IAAIC,MAAOC,cACjB5C,UAAW6C,KAAKC,SAAW,IAG7BxB,EACUmB,GACPnC,MAAK,SAAA2B,GACJjB,EAASD,EAAMgC,OAAOd,IACtBf,EAAW,QA+Cb,UACE,uBACE8B,MAAO/B,EACPgC,SA9CiB,SAACV,GACxBf,QAAQC,IAAIc,EAAMW,OAAOF,OACzB9B,EAAWqB,EAAMW,OAAOF,UA8CpB,wBAAQG,KAAK,SAAb,yBChFRC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.61a4b20f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important\r\n        ? 'make not important' : 'make important'\r\n  \r\n    return (\r\n        <li>\r\n            <p>\r\n                {note.content} <button onClick={toggleImportance}>{label}</button>\r\n            </p>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes'\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('')\r\n  const [showAll, setShowAll] = useState(true)\r\n\r\n  useEffect(() => {\r\n    noteService\r\n      .getAll()\r\n      .then(initialNotes => {\r\n        setNotes(initialNotes)\r\n      })\r\n  }, [])\r\n\r\n  console.log('render', notes.length, 'notes')\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5,\r\n    }\r\n  \r\n    noteService\r\n      .create(noteObject)\r\n      .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote))\r\n        setNewNote('')\r\n      })\r\n  }\r\n\r\n  const handleNoteChange = (event) => {\r\n    console.log(event.target.value)\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const toggleImportanceOf = id => {\r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }\r\n  \r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n      })\r\n      .catch(error => {\r\n        alert(\r\n          `the note '${note.content}' was already deleted from server`\r\n        )\r\n        setNotes(notes.filter(n => n.id !== id))\r\n      })\r\n  }\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter(note => note.important)\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all' }\r\n        </button>\r\n      </div>      \r\n      <ul>\r\n        {notesToShow.map(note =>\r\n          <Note \r\n            key={note.id} \r\n            note={note}\r\n            toggleImportance={() => toggleImportanceOf(note.id)}\r\n          />\r\n        )}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input\r\n          value={newNote}\r\n          onChange={handleNoteChange}\r\n        />\r\n        <button type=\"submit\">save</button>\r\n      </form>   \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}